type User {
    id: ID!
    name: String!
    email: String!
    monthlySalary: Int!
    monthlyExpense: Int!
}

input CreateUserInput {
    name: String!
    email: String!
    monthlySalary: Int!
    monthlyExpense: Int!
}

input UpdateUserInput {
    id: ID!
    name: String!
    email: String!
    monthlySalary: Float!
    monthlyExpense: Float!
}

enum AccountType {
    CREDIT
    DEBIT
}

type Account {
    accountId: ID!
    accountType: AccountType!
    userId: ID!
}

union PageData = User | Account

type PagedResult {
    items: [PageData]
    total: Int!
}

type Query {
    getAllUser: [User]
    getAllUserPaged(page: Int!, size: Int!): PagedResult
    getUserById(id: ID!): User
    getAllAccount: [Account]
    getAllAccountPaged(page: Int!, size: Int!): PagedResult
    getAccountById(id: ID!): Account
}

type Mutation {
    createUser(input: CreateUserInput!): User
    deleteUser(id: ID!): Boolean
    updateUser(input: UpdateUserInput!): User
}

schema {
    query: Query
    mutation: Mutation
}

